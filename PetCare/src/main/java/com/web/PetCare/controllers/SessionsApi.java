/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.web.PetCare.controllers;

import com.web.PetCare.dtos.SessionDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-09T20:41:55.130386800+02:00[Europe/Bucharest]")
@Validated
@Api(value = "sessions", description = "the sessions API")
public interface SessionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /sessions/session : Create a sessions
     *
     * @param sessionDTO Create a session (required)
     * @return Successful operation (status code 201)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Create a sessions", nickname = "createSession", notes = "", response = SessionDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful operation", response = SessionDTO.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @PostMapping(
        value = "/sessions/session",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SessionDTO> createSession(@ApiParam(value = "Create a session" ,required=true )  @Valid @RequestBody SessionDTO sessionDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"treatment\" : { \"name\" : \"Returning to normal nails\", \"description\" : \"Long treatment of cutting nails little by little\", \"id\" : 1 }, \"sessionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 1, \"pet\" : { \"owner\" : { \"firstName\" : \"John\", \"lastName\" : \"Doe\", \"id\" : 1 }, \"name\" : \"Aron\", \"id\" : 1, \"breed\" : { \"name\" : \"rottweiler\", \"description\" : \"Dog breed black and brown, seems vicious but are the best cuddlers\", \"id\" : 1 } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /sessions/session/{id} : Delete a session
     *
     * @param id  (required)
     * @return Successful operation (status code 204)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Delete a session", nickname = "deleteSession", notes = "", tags={ "Sessions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @DeleteMapping(
        value = "/sessions/session/{id}"
    )
    default ResponseEntity<Void> deleteSession(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sessions/session : List all sessions
     *
     * @return Successful operation (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "List all sessions", nickname = "getSessions", notes = "", response = SessionDTO.class, responseContainer = "List", tags={ "Sessions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = SessionDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @GetMapping(
        value = "/sessions/session",
        produces = { "application/json" }
    )
    default ResponseEntity<List<SessionDTO>> getSessions() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"treatment\" : { \"name\" : \"Returning to normal nails\", \"description\" : \"Long treatment of cutting nails little by little\", \"id\" : 1 }, \"sessionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 1, \"pet\" : { \"owner\" : { \"firstName\" : \"John\", \"lastName\" : \"Doe\", \"id\" : 1 }, \"name\" : \"Aron\", \"id\" : 1, \"breed\" : { \"name\" : \"rottweiler\", \"description\" : \"Dog breed black and brown, seems vicious but are the best cuddlers\", \"id\" : 1 } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sessions/sessionsPaid : List all sessions that got paid
     *
     * @return Successful operation (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "List all sessions that got paid", nickname = "getSessionsThatGotPaid", notes = "", response = SessionDTO.class, responseContainer = "List", tags={ "Sessions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = SessionDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @GetMapping(
        value = "/sessions/sessionsPaid",
        produces = { "application/json" }
    )
    default ResponseEntity<List<SessionDTO>> getSessionsThatGotPaid() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"treatment\" : { \"name\" : \"Returning to normal nails\", \"description\" : \"Long treatment of cutting nails little by little\", \"id\" : 1 }, \"sessionDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 1, \"pet\" : { \"owner\" : { \"firstName\" : \"John\", \"lastName\" : \"Doe\", \"id\" : 1 }, \"name\" : \"Aron\", \"id\" : 1, \"breed\" : { \"name\" : \"rottweiler\", \"description\" : \"Dog breed black and brown, seems vicious but are the best cuddlers\", \"id\" : 1 } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
