/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.web.PetCare.controllers;

import com.web.PetCare.dtos.TreatmentDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-01-08T11:52:17.105346100+02:00[Europe/Bucharest]")
@Validated
@Api(value = "treatments", description = "the treatments API")
public interface TreatmentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /treatments/treatment : Create an treatment
     *
     * @param treatmentDTO Create an treatment (required)
     * @return Successful operation (status code 201)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Create an treatment", nickname = "createTreatment", notes = "", response = TreatmentDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful operation", response = TreatmentDTO.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @PostMapping(
        value = "/treatments/treatment",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TreatmentDTO> createTreatment(@ApiParam(value = "Create an treatment" ,required=true )  @Valid @RequestBody TreatmentDTO treatmentDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Returning to normal nails\", \"description\" : \"Long treatment of cutting nails little by little\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /treatments/treatment/{id} : Delete a treatment
     *
     * @param id  (required)
     * @return Successful operation (status code 204)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Delete a treatment", nickname = "deleteTreatment", notes = "", tags={ "Treatments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @DeleteMapping(
        value = "/treatments/treatment/{id}"
    )
    default ResponseEntity<Void> deleteTreatment(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /treatments/treatment : List all treatments
     *
     * @return Successful operation (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "List all treatments", nickname = "getTreatments", notes = "", response = TreatmentDTO.class, responseContainer = "List", tags={ "Treatments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = TreatmentDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not Found") })
    @GetMapping(
        value = "/treatments/treatment",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TreatmentDTO>> getTreatments() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Returning to normal nails\", \"description\" : \"Long treatment of cutting nails little by little\", \"id\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
